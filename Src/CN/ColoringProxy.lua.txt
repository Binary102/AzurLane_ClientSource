slot0 = class("ColoringProxy", import(".NetProxy"))

slot0.register = function (slot0)
	slot0.colorGroups = {}
	slot0.colorItems = {}
end

slot0.netUpdateData = function (slot0, slot1)
	slot0.startTime = slot1.start_time
	slot2 = {}

	_.each(slot1.award_list, function (slot0)
		slot0[slot0.id] = _.map(slot0.award_list, function (slot0)
			return {
				type = slot0.type,
				id = slot0.id,
				count = slot0.number
			}
		end)
	end)

	slot3 = {}

	for slot7, slot8 in pairs(pg.activity_template) do
		if slot8.type == ActivityConst.ACTIVITY_TYPE_COLORING_ALPHA then
			slot3 = slot8.config_data

			break
		end
	end

	slot0.colorGroups = {}

	_.each(slot3, function (slot0)
		ColorGroup.New(slot1):setHasAward(slot0[2] > 0)

		if slot1 == slot0.id then
			_.each(slot0.cell_list, function (slot0)
				slot0:setFill(slot0.row, slot0.column, slot0.color)
			end)
		end

		slot3:setDrops(slot1[slot1] or {})

		if #(slot1[slot1] or ) > 0 then
			slot3:setState(ColorGroup.StateAchieved)
		elseif slot1 < slot0.id or slot3:isAllFill() then
			slot3:setState(ColorGroup.StateFinish)
		end

		table.insert(slot2.colorGroups, slot3)
	end)

	slot4 = 0

	for slot8 = #slot0.colorGroups, 1, -1 do
		if slot0.colorGroups[slot8]:getState() == ColorGroup.StateFinish or slot9 == ColorGroup.StateAchieved then
			slot4 = slot8

			break
		end
	end

	for slot8 = slot4 - 1, 1, -1 do
		if not slot0.colorGroups[slot8]:getState() then
			slot9:setState(ColorGroup.StateFinish)
		end
	end

	slot0.colorGroups[slot4 + 1]:setState((slot4 == 0 and ColorGroup.StateColoring) or ColorGroup.StateLock)

	for slot8 = slot4 + 2, #slot0.colorGroups, 1 do
		if not slot0.colorGroups[slot8]:getState() then
			slot9:setState(ColorGroup.StateLock)
		end
	end

	slot0:checkState()

	slot0.colorItems = {}

	for slot8, slot9 in ipairs(slot1.color_list) do
		slot0.colorItems[slot9.id] = slot9.number
	end
end

slot0.getColorItems = function (slot0)
	return slot0.colorItems
end

slot0.getColorGroups = function (slot0)
	return slot0.colorGroups
end

slot0.getColorGroup = function (slot0, slot1)
	return _.detect(slot0.colorGroups, function (slot0)
		return slot0.id == slot0
	end)
end

slot0.checkState = function (slot0)
	slot1 = false

	if getProxy(ActivityProxy):getActivityByType(ActivityConst.ACTIVITY_TYPE_COLORING_ALPHA) and not slot3:isEnd() then
		slot4 = pg.TimeMgr.GetInstance()
		slot5 = slot4:DiffDay(slot0.startTime, slot4:GetServerTime()) + 1

		for slot9, slot10 in ipairs(slot0.colorGroups) do
			if slot10:getState() == ColorGroup.StateColoring and slot10:isAllFill() then
				slot10:setState(ColorGroup.StateFinish)

				slot1 = true

				break
			elseif slot9 < slot5 and slot10:getState() == ColorGroup.StateAchieved and slot0.colorGroups[slot9 + 1] and slot11:getState() == ColorGroup.StateLock then
				slot11:setState(ColorGroup.StateColoring)

				slot1 = true

				break
			end
		end
	end

	return slot1
end

return slot0
